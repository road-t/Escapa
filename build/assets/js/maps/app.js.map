{"version":3,"sources":["config.coffee","game.coffee","html.coffee","main.coffee","move.coffee","object.coffee","physics.coffee","render.coffee","resource.coffee","strings.coffee"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"/source/","sourcesContent":["config = {\n  folders: {\n    base: 'assets/images',\n    bgr: 'bgr',\n    mob: 'mob',\n    projectiles: 'projectiles',\n    player: 'player',\n    animation: 'animations',\n    misc: 'misc',\n  },\n\n  animations: [\n    { name: 'crash.png', frames: 11, fpf: 6, height: 256, width: 256 },\n    { name: 'blowup.png', frames: 11, fpf: 4, width: 64, height: 64 }\n  ],\n\n  logo: { name: 'escape.png', buoyancy: .04, x: 156, y: 108 },\n  bgr: { name: 'start.png' },\n\n  levels: [\n    {\n      background: { name: 'space.jpg', color: '#000'}\n      enemies: [\n        {color: '#fc9', sprite: { name: 'asteroid0.png'}, rotation: { speed: 1, angle: 0}, radius: 30, top: 320, left: 100, em: {x: 3, y: 3, m: .8}},\n        {color: '#c9f', sprite: { name: 'asteroid1.png'}, rotation: { speed: 5, angle: 0}, radius: 30, top: 380, left: 300, em: {x: 3, y: 3, m: 0.5}},\n        {color: '#0f0', sprite: { name: 'asteroid2.png'}, rotation: { speed: 3, angle: 0}, radius: 40, top: 250, left: 500, em: {x: 2, y: 2, m: 3}},\n        {color: '#cfc', sprite: { name: 'asteroid3.png', x: -5, y: 0, width: 73, height: 62, frames: 20, fpf: 2}, rotation: { speed: 1.6}, radius: 30, top: 450, left: 600, em: {x: 2, y: 2, m: 1.5}},\n        {color: '#fc9', sprite: { name: 'asteroid0.png'}, rotation: { speed: 1, angle: 0}, radius: 30, top: 70, left: 250, em: {x: 3, y: 3, m: .7}},\n        {color: '#c9f', sprite: { name: 'asteroid1.png'}, rotation: { speed: 5, angle: 0}, radius: 30, top: 520, left: 150, em: {x: 2, y: 2, m: 2}},\n        {color: '#cf9', sprite: { name: 'asteroid2.png'}, rotation: { speed: 3, angle: 0}, radius: 40, top: 250, left: 400, em: {x: 1, y: 1, m: 3.5}},\n        {color: '#cfc', sprite: { name: 'asteroid3.png', x: -5, y: 0, width: 73, height: 62, frames: 20, fpf: 3}, rotation: { speed: 1}, radius: 30, top: 100, left: 600, em: {x: 2, y: 3, m: 2}},\n      ]\n    },\n\n    {\n      name: { ru: 'Открытый космос', en: 'Open space' },\n      hello: { ru: 'Скопление астероидов', en: 'Asteroid cluster' },\n      over: '',\n      background: { name: 'space.jpg', color: '#000', scroll: { x: 0, y: 13 }, zoom: 0 },\n      speed: 1,\n      stop: 16000,\n      minimal: 10000,\n\n      player: {\n        color: '#56b65d',\n        sprite: { name: 'spaceship.png', frames: 2, fpf: 2, width: 80, height: 128 },\n        em: { x: 0, y: 0, m: .6 },\n        top: 580,\n        left: 310,\n        width: 80,\n        height: 116\n      },\n\n      enemies: [\n        { color: '#00f', width: 100, height: 0, top: 0, left: 100, em: { x: 1, y: 0, m: 0 }, projectiles:\n          [\n            { color: '#f00', sprite: { name: 'asteroid0.png'}, radius: 30, em: { auto: true }, rotation: { speed: 7 }, frequency: 350, x: 10, y: -50, contact: ['crash'] },\n            { color: '#f00', sprite: { name: 'asteroid1.png'}, radius: 30, em: { auto: true }, rotation: { speed: 2 }, frequency: 500, x: 10, y: -50, contact: ['crash'] },\n            { color: '#f00', sprite: { name: 'asteroid2.png'}, radius: 40, em: { auto: true }, rotation: { speed: 4 }, frequency: 1200, x: 10, y: -70, contact: ['crash'] },\n            {color: '#cfc', sprite: { name: 'asteroid3.png', x: -5, y: 0, width: 73, height: 62, frames: 20, fpf: 2}, rotation: { speed: 2 }, radius: 30, em: { auto: true }, frequency: 1600, x: 40, y: -50,  contact: ['crash'] },\n          ]\n        },\n        { color: '#ff0', width: 100, height: 0, top: 0, left: 600, em: { x: -1, y: 0, m: 0 }, projectiles:\n          [\n            { color: '#0f0', sprite: { name: 'asteroid0.png'}, radius: 30, em: { auto: true }, rotation: { speed: 5 }, frequency: 200, x: 10, y: -50, contact: ['crash'] },\n            { color: '#0f0', sprite: { name: 'asteroid1.png'}, radius: 30, em: { auto: true }, rotation: { speed: 3 }, frequency: 700, x: 20, y: -50, contact: ['crash'] },\n            { color: '#0f0', sprite: { name: 'asteroid2.png'}, radius: 40, em: { auto: true }, rotation: { speed: 2 }, frequency: 1000, x: 10, y: -70, contact: ['crash'] },\n            {color: '#cfc', sprite: { name: 'asteroid3.png', x: -5, y: 0, width: 73, height: 62, frames: 20, fpf: 3}, rotation: { speed: 1 }, radius: 30, em: { auto: true }, frequency: 1200, x: 20, y: -50, contact: ['crash'] },\n          ]\n       }\n      ]\n    },\n\n    {\n      name: { ru: 'Корабль', en: 'Spaceship' },\n      hello: { ru: 'Авария на корабле', en: 'Shipwreck' }\n      over: '',\n      background: { name: 'spaceship_int.jpg', color: '#ccc', zoom: .025, rotate: .42 },\n      filter: { threshold: 1, duration: .5, color: 'rgba(255, 0, 0, 0.3)' },\n      speed: 1.1,\n      minimal: 10000,\n      stop: 16000,\n\n      player: {\n        color: '#56b65d',\n        sprite: { name: 'astronaut.png', x: 0, y: 0, frames: 8, fpf: 8, width: 156, height: 156 },\n        top: 325,\n        left: 310,\n        width: 150,\n        height: 150\n      },\n\n      enemies: [\n        {color: '#afd', sprite: { name: 'mug.png', x: 0, y: -3, width: 40, height: 38 }, rotation: { speed: 3}, radius: 16, top: 600, left: 600,  em: {x: 1, y: 1, m: 1, auto: true }},\n        {color: '#3d3', sprite: { name: 'watermelon.png', x: 5, y: -3, width: 51, height: 60 }, rotation: { speed: 2}, radius: 30, top: 80, left: 300, em: {x: 2, y: 2, m: 4, auto: true}},\n        {color: '#d33', sprite: { name: 'weight.png', x: 6, y: -6, width: 63, height: 90 }, rotation: { speed: 2 }, radius: 38, top: 600, left: 60, em: {x: 1.5, y: 1.5, m: 8, auto: true} },\n      ]\n    },\n\n    {\n      name: 'Орбита',\n      hello: 'Прорвись через охрану',\n      over: '',\n      background: { name: 'planet.jpg', color: '#101018',  zoom: .04 },\n      speed: 1,\n      minimal: 10000,\n      stop: 16000,\n\n      player: {\n        color: '#56b65d',\n        sprite: { name: 'boat.png', x: -3, y: 0, frames: 2, fpf: 2, width: 55, height: 60 },\n        top: 630,\n        left: 310,\n        width: 48,\n        height: 48\n      },\n\n      enemies: [\n        { color: '#f00', sprite: { name: 'fighter0.png', x: 0, y: -15, frames: 2, fpf: 3, width: 80, height: 112 }, width: 80, height: 100, top: 70, left: 600, em: {x: -4, y: 0}, contact: ['blowup'],  projectiles:\n          [\n            { color: '#f00', rotation: { auto: true }, sprite: { name: 'beam_r.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: 0, y: 6, m: 0 }, frequency: 1800, x: 38, y: 100, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: -.5, y: 3, m: 0 }, frequency: 500, x: 50, y: 42, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: -.5, y: 2, m: 0 }, frequency: 600, x: 25, y: 42, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: .5, y: 3, m: 0 }, frequency: 400, x: 50, y: 42, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: .5, y: 2, m: 0 }, frequency: 300, x: 25, y: 42, contact: ['blowup'] }\n          ]\n        },\n        { color: '#fc9', sprite: { name: 'fighter1.png', x: 0, y: -15, frames: 2, fpf: 3, width: 80, height: 112 }, width: 80, height: 100, top: 180, left: 70, em: {x: 4, y: 0}, contact: ['blowup'], projectiles:\n          [\n            { color: '#f00', rotation: { auto: true }, sprite: { name: 'beam_r.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: 0, y: 6, m: 0 }, frequency: 1500, x: 38, y: 100, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: .5, y: 3, m: 0 }, frequency: 600, x: 50, y: 42, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: -.5, y: 2, m: 0 }, frequency: 500, x: 25, y: 42, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: .5, y: 3, m: 0 }, frequency: 300, x: 50, y: 42, contact: ['blowup'] },\n            { rotation: { auto: true }, sprite: { name: 'beam.png', x: -1, y: 0, width: 8, height: 31 }, width: 4, height: 28, em: { x: -.5, y: 2, m: 0}, frequency: 400, x: 25, y: 42, contact: ['blowup'] }\n          ]\n        }\n      ]\n    },\n\n    {\n      name: 'Атмосфера',\n      hello: 'Спасайся!',\n      background: {name: 'atmosphere.jpg', color: '#383a2b', scroll: {x: -4, y: -6} }\n      filter: { threshold: 0, duration: 15, color: 'rgba(255, 0, 0, 0.1)' },\n      minimal: 10000,\n      stop: 16000,\n      speed: .9,\n      player: {\n        color: '#56b65d',\n        sprite: { name: 'falling_boat.png', x: -175, y: -4, frames: 16, fpf: 2, width: 222, height: 54 },\n        top: 550,\n        left: 550,\n        width: 46,\n        height: 48,\n        rotation: { angle: 16, speed: 0 }\n      },\n\n      enemies: [\n        { color: '#ddd', sprite: { name: 'interceptor.png', x: 0, y: -3, width: 120, height: 88 }, width: 120, height: 90, left: 20, top: 300, em: { x: 0, y: 7 }, contact: ['blowup'], projectiles:\n          [\n            { sprite: { name: 'plasma.png', x: -10, y: -8, frames: 4, fpf: 1 }, rotation: {speed: 100}, radius: 16, em: { x: 4, y: 2, m: 0, sauto: true }, frequency: 500, x: 120, y: 52, contact: ['blowup'] },\n            { sprite: { name: 'plasma.png', x: -10, y: -8, frames: 4, fpf: 1 }, rotation: {speed: 100}, radius: 16, em: { x: 6, y: 1, m: 0, sauto: true }, frequency: 800, x: 120, y: 52, contact: ['blowup'] },\n            { sprite: { name: 'plasma.png', x: -10, y: -8, frames: 4, fpf: 1 }, rotation: {speed: 100}, radius: 16, em: { x: 4, y: -1, m: 0, sauto: true }, frequency: 1200, x: 120, y: 52, contact: ['blowup'] },\n            { sprite: { name: 'plasma.png', x: -10, y: -8, frames: 4, fpf: 1 }, rotation: {speed: 100}, radius: 16, em: { x: 3, y: -0, m: 0, sauto: true }, frequency: 1600, x: 120, y: 52, contact: ['blowup'] },\n            { sprite: { name: 'plasma.png', x: -10, y: -8, frames: 4, fpf: 1 }, rotation: {speed: 100}, radius: 16, em: { x: 4, y: -1, m: 0, sauto: true }, frequency: 1000, x: 120, y: 52, contact: ['blowup'] },\n            { sprite: { name: 'plasma.png', x: -10, y: -8, frames: 4, fpf: 1 }, rotation: {speed: 100}, radius: 16, em: { x: 5, y: 0, m: 0, sauto: true }, frequency: 700, x: 120, y: 52, contact: ['blowup'] },\n            { sprite: { name: 'plasma.png', x: -10, y: -8, frames: 4, fpf: 1 }, rotation: {speed: 100}, radius: 16, em: { x: 3, y: -2, m: 0, sauto: true }, frequency: 900, x: 120, y: 52, contact: ['blowup'] },\n          ]\n        }\n      ]\n    },\n    {\n      name: 'Поверхность',\n      hello: 'Доберись до портала',\n      background: {name: 'surface.jpg', color: '#fca052', scroll: {x: -40, y: 0} },\n      minimal: 13000,\n      stop: 16000,\n      player: {\n        color: '#56b65d',\n        sprite: { name: 'falling_boat.png', x: -175, y: -4, frames: 16, fpf: 2, width: 222, height: 54 },\n        top: 200,\n        left: 50,\n        width: 48,\n        height: 48\n      },\n      enemies: [\n        { sprite: { name: 'mountain0.png' }, width: 1200, height: 674, left: 1200, top: 100, em: { x: -3, y: 0, m: 0 }, free: true, contact: ['blowup'] },\n        { sprite: { name: 'mountain3.png' }, width: 1300, height: 447, left: 0, top: 254, em: { x: -3, y: 0, m: 0 }, free: true, contact: ['blowup'] },\n        { sprite: { name: 'mountain1.png' }, width: 455, height: 186, left: 3700, top: 516, em: { x: -3, y: 0, m: 0 }, free: true, contact: ['blowup'] },\n        { sprite: { name: 'mountain2.png' }, width: 1450, height: 475, left: 2400, top: 226, em: { x: -3, y: 0, m: 0 }, free: true, contact: ['blowup'] },\n        { color: '#ff0', width: 0, height: 0, top: 20, left: 600, em: { x: 9, y: 0, m: 0 }, projectiles:\n          [\n            { sprite: { name: 'meteorite.png', x: -32, y: -222, frames: 4, fpf: 5, width: 70, height: 256 }, rotation: { auto: true}, radius: 6, em: { x: -6, y: 4, m: 0 }, frequency: 1600, x: 10, y: 0, contact: ['blowup'] }\n            { sprite: { name: 'meteorite.png', x: -32, y: -222, frames: 4, fpf: 5, width: 70, height: 256 }, rotation: { auto: true}, radius: 6, em: { x: -3, y: 2, m: 0 }, frequency: 900, x: 60, y: 0, contact: ['blowup'] }\n          ]\n        },\n        { color: '#ff0', width: 0, height: 0, top: 30, left: 700, em: { x: 5, y: 0, m: 0 }, projectiles:\n          [\n            { sprite: { name: 'meteorite.png', x: -32, y: -222, frames: 4, fpf: 5, width: 70, height: 256 }, rotation: { auto: true}, radius: 6, em: { x: -4, y: 4, m: 0 }, frequency: 2200, x: 30, y: 0, contact: ['blowup'] }\n            { sprite: { name: 'meteorite.png', x: -32, y: -222, frames: 4, fpf: 5, width: 70, height: 256 }, rotation: { auto: true}, radius: 6, em: { x: -5, y: 3, m: 0 }, frequency: 3000, x: 30, y: 0, contact: ['blowup'] }\n          ]\n        },\n        { name: 'portal', width: 40, height: 700, top: 0, left: 4200, em: { x: -3, y: 0, m: 0 }, free: true, sprite: {name: 'ripple.png', frames: 3, fpf: 6, x: -60, width: 93, height: 700}, contact: ['disappear'] },\n        { name: 'portal', width: 40, height: 700, top: 0, left: 4230, em: { x: -3, y: 0, m: 0 }, free: true, sprite: {name: 'ripple.png', frames: 3, fpf: 6, x: -60, width: 93, height: 700}, contact: ['disappear'] },\n        { name: 'portal', width: 40, height: 700, top: 0, left: 4260, em: { x: -3, y: 0, m: 0 }, free: true, sprite: {name: 'ripple.png', frames: 3, fpf: 6, x: -60, width: 93, height: 700}, contact: ['disappear'] },\n        { name: 'portal', width: 40, height: 700, top: 0, left: 4300, em: { x: -3, y: 0, m: 0 }, free: true, sprite: {name: 'ripple.png', frames: 3, fpf: 6, x: -60, width: 93, height: 700}, contact: ['disappear'] }\n      ]\n    },\n\n    {\n      name: 'Бонус',\n      hello: 'Классическая Escapa',\n      over: '',\n      speed: 1.1,\n      minimal: 0,\n      color: '#666',\n\n      player: {\n        color: '#0a0',\n        top: 320,\n        left: 320,\n        radius: 40,\n      },\n\n      enemies: [\n        { color: '#00f', width: 120, height: 50, em: { x: 3, y: -1, m: 0, auto: true }, top: 50, left: 50 },\n        { color: '#f0f', width: 90, height: 60, em: { x: -4, y: -4, m: 0, auto: true }, top: 600, left: 550 },\n        { color: '#ff0', width: 50, height: 120, em: { x: 5, y: 2, m: 0, auto: true }, top: 20, left: 600 },\n        { color: '#0ff', width: 40, height: 90, em: { x: 2, y: 5, m: 0, auto: true }, top: 550, left: 40 },\n      ]\n    }\n  ],\n  debug: false,\n  version: '1.3.0.0'\n}","class Game\n  cfg = {}\n\n  _cycleTO = null # timeout ID to prevent double-calls on mobile devices\n  _pa = 0 # post animation step\n  animations = []\n\n  html_escape_logo = null\n\n  lang = navigator.language\n\n  logo = null\n  bgr = null\n\n  _tkn = null\n  rating = { data: null, ts: 0 }\n\n  renderer = null\n  loader = null\n\n  collision = null\n  level = {}\n  current_level = 0\n  difficulty = -1\n  player = { id: null, name: 'чувак', rank: 0, record: 0 }\n  _score = []\n  total_time = 0\n  total_bonus = 0\n\n  constructor: (config) ->\n    cfg = config\n    renderer = new Render(cfg.debug)\n    loader = new Resource(cfg.folders, start_screen, _loading)\n    animations = cfg.animations if cfg.animations?\n    logo = cfg.logo if cfg.logo?\n    bgr = cfg.bgr if cfg.bgr?\n\n    html_escape_logo = $('#escapelogo')\n    $('#gotvglogo,#razerlogo').click (e) -> e.stopPropagation()\n    $('#version').text('v' + cfg.version)\n    $('#cpr_notice').text(getString(main.copyright) + '.')\n    $('#click_notice').text(getString(main.continue))\n    $('#click').text(getString(main.click))\n    $('#options > #title').text(getString(main.difficulty))\n    $('#easy').text(getString(main.easy))\n    $('#normal').text(getString(main.normal))\n    $('#hard').text(getString(main.hardcore))\n    $('#insane').text(getString(main.insane))\n\n    # TODO: crash on bogus config\n\n\n    $(document).keyup (e) =>\n      switch e.keyCode\n        when 70 then $('#fps').toggle()     # F\n        when 86 then $('#version').toggle() # V\n        when 82 then showTop()              # R\n        when 68 then $('#dbg').toggle()     # D\n\n    #  console.log e.keyCode\n    getTop()\n    load()\n\n  reset = ->\n    _score = []\n    total_time = 0\n    total_bonus = 0\n    current_level = 0\n\n  load = =>\n    showMessage getString(main.loading) + \" 0%\"\n\n    collision = null\n\n    # load level data\n    level = $.extend true, {}, cfg.levels[current_level]\n    level.speed -= difficulty * 0.15\n    level.stop -= difficulty * 2000\n    level.minimal -= difficulty * 2000\n    level.time = 0\n    level.started = 0\n    level.score = 0\n    level.last_ts = 0 # last timestamp\n\n    # get resources\n    loader.startQueue()\n\n    unless current_level\n      logo = loader.getResource(cfg.logo.name, 'misc').image if cfg.logo?\n      bgr = loader.getResource(cfg.bgr.name, 'misc').image if cfg.bgr?\n    else\n      updateHUD()\n\n    if level.background? and level.background.name\n      level.background.image = loader.getResource(level.background.name, 'bgr').image\n\n    # load player data\n    if level.player? and level.player.sprite?\n      level.player.sprite.image = loader.getResource(level.player.sprite.name, 'player').image\n      level.player.sprite.x = 0 unless level.player.sprite.x\n      level.player.sprite.y = 0 unless level.player.sprite.y\n      #level.player.sprite.width = 0 unless level.player.image.width\n      #level.player.sprite.height = 0 unless level.player.image.width\n      level.player.sprite.frames = 1 unless level.player.sprite.frames\n      level.player.sprite.fpf = 1000 unless level.player.sprite.fpf\n      level.player.sprite.fsps = 0\n\n    if level.player and level.player.radius\n      level.player.width = level.player.height = level.player.radius * 2\n\n    # load enemies data\n    if level.enemies?\n      for enemy in level.enemies\n        if enemy.sprite?\n          enemy.sprite.image = loader.getResource(enemy.sprite.name, 'mob').image\n          enemy.sprite.x = 0 unless enemy.sprite.x\n          enemy.sprite.y = 0 unless enemy.sprite.y\n          #enemy.sprite.width = 0 unless enemy.image.width\n          #enemy.sprite.height = 0 unless enemy.image.width\n          enemy.sprite.frames = 1 unless enemy.sprite.frames\n          enemy.sprite.fpf = 1000 unless enemy.sprite.fpf\n          enemy.sprite.fsps = 0\n\n        if enemy.em.auto\n          enemy.em.x *= if random() then 1 else -1\n          enemy.em.y *= if random() then 1 else -1\n\n        #enemy.em.i = 0 unless enemy.em.i?\n        enemy.em.m = 0 unless enemy.em.m?\n\n        if enemy.radius?\n          # TODO: raise error on wrong config\n          enemy.width = enemy.height = enemy.radius * 2\n\n        if enemy.projectiles?\n          for projectile in enemy.projectiles\n            if projectile.sprite?\n              projectile.sprite.image = loader.getResource(projectile.sprite.name, 'projectiles').image\n              projectile.sprite.x = 0 unless projectile.sprite.x\n              projectile.sprite.y = 0 unless projectile.sprite.y\n              #projectile.sprite.width = 0 unless projectile.image.width\n              #projectile.sprite.height = 0 unless projectile.image.width\n              projectile.sprite.frames = 1 unless projectile.sprite.frames\n              projectile.sprite.fpf = 1000 unless projectile.sprite.fpf\n              projectile.sprite.fsps = 0\n\n            # put projectile to an initial position\n            projectile.top = -100\n            projectile.left = -100\n            projectile.hide = true\n            projectile.last_time = 0\n\n            if projectile.radius?\n            # TODO: raise error on wrong config\n              projectile.width = projectile.height = projectile.radius * 2\n\n            #projectile.em.i = 0 unless projectile.em.i?\n            projectile.em.m = 0 unless projectile.em.m?\n\n    animation.image = loader.getResource(animation.name, 'animation').image for animation in animations\n\n    loader.closeQueue() # wait for progress\n\n\n  _loading = (progress) =>\n    showMessage getString(main.loading) + ' ' + progress + '%'\n\n  kill = =>\n    reset()\n    load()\n\n  start_screen = =>\n    if current_level\n      #if current_level is 1 and not player.id and not player.record\n      #  return showMessage '#f00|Внимание!\\n#fff|Чтобы участвовать в <a href=\"http://got.vg/article/razer-escape/\" target=\"_blank\">конкурсе</a>\\nи рейтинге, необходимо\\nавторизоваться на <a href=\"http://got.vg/\" target=\"_blank\">got.VG</a>\\nи перезагрузить страницу', true, wait\n      #else\n      return wait()\n\n    renderer.clear() # clear everything that could possibly stay\n    $('#cover').hide()\n    $('#hud').hide()\n\n    $('#start').show().one 'click', ->\n      $('#start').hide()\n      options()\n\n    demo = =>\n      distance = 8\n\n      renderer.draw level\n      level.time++\n      moveEnemies()\n\n      if level.time < 500\n        if _pa < Math.PI*2 then _pa += cfg.logo.buoyancy else _pa = 0\n        $(html_escape_logo).css { top: Math.sin(_pa) * distance + cfg.logo.y}\n      else\n        if level.time == 500\n          showTop()\n        else if level.time == 1000\n          hideTop()\n          level.time = 0\n\n      _cycleTO = requestAnimationFrame demo\n\n    demo()\n\n  wait = =>\n    $('#cover').one 'click', start\n    renderer.clear() # clear everything that could possibly stay\n    updateHUD()\n    renderer.draw level\n    showMessage \"#fff|Уровень #{current_level}: #{getString(level.name)}\\n#0e0|#{getString(level.hello)}\" + if level.minimal then \"\\n#0cf|Продержись #{level.minimal/1000} секунд\" else ''\n\n  options = =>\n    cancelAnimationFrame _cycleTO\n    $('#cover').css 'display', 'flex'\n    $('#message').hide()\n    $('#options').show()\n    $('#easy').one 'click', => _selectDifficulty 1\n    $('#normal').one 'click', => _selectDifficulty 0\n    $('#hard').one 'click', => _selectDifficulty -1\n    $('#insane').one 'click', => _selectDifficulty -2\n\n  _selectDifficulty = (difficultyLevel) =>\n    difficulty = difficultyLevel unless current_level\n    $('#options').fadeOut 100\n    cancelAnimationFrame _cycleTO\n    current_level = 1\n    load()\n\n  start = =>\n    $('#cover').hide()\n    $('#overlay').on 'mousemove touchmove', movePlayer\n\n    level.started = new Date().getTime()\n\n    renderer.resetFPS()\n    @stop = false\n    play()\n\n  play = =>\n    return if @stop\n\n    now = new Date().getTime()\n\n    if current_level and level.last_ts and now - level.last_ts > 300 # cheater or device is too slow\n      showMessage '#f00|' + getString(main.error) + '!\\nПохоже, что твой\\nдевайс работает\\nслишком медленно.\\nНам очень жаль.', true, kill\n      return cancelAnimationFrame _cycleTO\n\n    if level.started\n      level.time = now - level.started\n\n    done = false\n\n    if level.stop and level.time + 30 >= level.stop\n      done = true\n\n    renderer.draw level\n\n    moveEnemies()\n\n    level.time = level.stop if done\n\n    level.score = level.time - level.minimal if level.time > level.minimal\n\n    updateHUD()\n\n    if collision or done # game over\n      cancelAnimationFrame _cycleTO\n\n      $('#overlay').off 'mousemove touchmove'\n\n      if collision and collision.killer?.contact?\n        _pa = 0\n        switch collision.killer.contact[0]\n          when 'disappear' then disappear()\n          when 'blowup' then blowup()\n          when 'crash' then crash()\n          else knockout()\n      else\n        gameover()\n    else\n      _cycleTO = requestAnimationFrame play\n\n  gameover = =>\n    @stop = true\n\n    multiplier = 1 # bonus multiplier\n\n    if level.minimal <= level.time\n      if level.stop and level.time >= (level.stop - 30)\n        level.time = level.stop\n        multiplier = 2 # double bonus!\n\n      total_bonus += level.score * multiplier\n      total_time += level.time\n\n    unless level.score # lose\n      if total_bonus\n        if total_bonus > player.record\n          player.record = total_bonus\n          message = \"#f00|Game over, #{player.name}!\\n#9f0|Новый личный рекорд: #{simplePluralize(total_bonus, ['очко', 'очка', 'очков'])}\"\n        else\n          message = \"#f00|Game over, #{player.name}!\\n#9f0|Бонус: #{total_bonus}\"\n\n        vk_desc = 'Я набрал ' + simplePluralize(player.record, ['очко', 'очка', 'очков']) + ' в Escape!\\nУчаствуй в конкурсе на gotVG и выиграй игровую мышь Razer Mamba Tournament Edition!'\n        # TODO: display ranking\n\n        message += \"\\n\\n<a href=\\\"http://vk.com/share.php?url=#{encodeURI('http://got.vg/article/razer-escape/')}&title=#{encodeURI('Мой рекорд в gotVG Escape')}&noparse=true&description=#{encodeURI(vk_desc)}&image=http://escape.got.vg/assets/images/misc/escape.png\\\" target=\\\"_blank\\\">Поделиться ВКонтакте</a>\"\n\n\n        hiscores(message, true)\n      else\n        message = '#f00|Game over без бонуса!'\n        hiscores(message)\n\n      reset()\n    else # win\n      _score[current_level] = level.score\n\n      if ++current_level < cfg.levels.length # advance level\n        message = '#0f0|Уровень пройден!'\n        message += '\\n#0df|' + level.over + '\\n' if level.over\n        message += if multiplier < 2 then '\\n#f99|Бонус: ' + level.score else \"\\n#9f0|Бонус #f00|x 2 #ff0|: #{level.score * multiplier}\"\n\n        showMessage message, true, load\n      else # beaten\n        total_bonus *= 2\n        message = \"#0f0|Игра пройдена, #{player.name}!\\n#9f0|Бонус #f00|x 2 #ff0|: #{total_bonus}\"\n\n        vk_desc = 'Я прошел Escape! Мой рекорд: ' + simplePluralize(player.record, ['очко', 'очка', 'очков']) + '!\\nУчаствуй в конкурсе на gotVG и выиграй игровую мышь Razer Mamba Tournament Edition!'\n        # TODO: display ranking\n\n        message += \"\\n\\n<a href=\\\"http://vk.com/share.php?url=#{encodeURI('http://got.vg/article/razer-escape/')}&title=#{encodeURI('Я прошёл gotVG Escape!')}&noparse=true&description=#{encodeURI(vk_desc)}&image=http://escape.got.vg/assets/images/misc/escape.png\\\" target=\\\"_blank\\\">Поделиться ВКонтакте</a>\"\n\n        player.record = total_bonus if total_bonus > player.record\n\n        hiscores(message, true)\n        reset()\n\n\n  _getSpeed = ->\n    if level.time\n      if level.speed then Math.pow((level.time * level.speed)/10000, 4) + level.speed else 1\n      #if level.speed then ((level.time * level.speed)/7500) + level.speed else 1\n    else\n      return 0\n\n  getTop = ->\n    $.get('http://escape.got.vg/record.php', null, (result) =>\n      unless result.error\n        if result.player?\n          player = result.player\n\n        _tkn = result.csrf\n\n        rating.data = result.data\n        rating.ts = result.ts\n\n        records = '' # populating rankings table\n        i = 0\n        for row in rating.data\n          records += \"<tr><td>#{++i}.</td><td>#{name}</td><td>#{score}</td></tr>\" for name, score of row\n\n        $('#records').html(records)\n      #else\n      #  showMessage '#f00|Беда!\\nНевозможно\\nсоединиться\\nс сервером!', true, kill\n\n    , 'json')\n    .fail =>\n      showMessage '#f00|' + getString(main.error) + '!\\n' + getString(main.connectionIssue), true, hideTop\n\n  hiscores = (msg = '', send = false) ->\n    showMessage 'Загрузка рейтинга...', true\n\n    if send and player.id\n      data =  {key: _prepare(btoa _score.toString() + '=' + total_time + '|' + total_bonus), score: total_bonus, player: player.id, data: _tkn, version: cfg.version}\n    else\n      data = null\n\n    $.get('http://escape.got.vg/record.php', data, (result) =>\n      unless result.error\n        rating.data = result.data\n        rating.ts = result.ts\n\n        records = ''\n\n        i = 0\n        for row in rating.data\n          records += \"<tr><td>#{++i}.</td><td>#{name}</td><td>#{score}</td></tr>\" for name, score of row\n\n        $('#records').html(records)\n        $('#rating').show()\n      else\n        msg += '\\n#f99|Ошибка загрузки рейтинга'\n\n      showMessage msg, true, =>\n        $('#rating').hide()\n        hideMessage()\n        load()\n\n    , 'json')\n    .fail =>\n        showMessage '#f00|Беда!\\nНевозможно\\nсоединиться\\nс сервером!', true, kill\n\n  showTop = =>\n    now = new Date().getTime()\n    getTop() if (now/1000 - rating.ts) > 10\n\n    $(html_escape_logo).hide()\n    $('#click').hide()\n\n    if rating.data.length\n      $('#rating').show()\n      showMessage null, true, hideTop\n\n  hideTop = =>\n    $('#rating').hide()\n    hideMessage()\n    $(html_escape_logo).show()\n    $('#click').show()\n\n  _prepare = (data) ->\n    r = ''\n    for i in [0...data.length]\n        r += String.fromCharCode(data.charCodeAt(i) ^ 0x64)\n\n    return btoa(r) + '°€§√яZ'\n\n  movePlayer = (e) =>\n    return unless level.player?\n\n    # handle touch crap\n    e.preventDefault()\n\n    screen = renderer.getScreen()\n    _player = level.player\n\n    if e.type is 'touchmove'\n      move = e.originalEvent.changedTouches[0]\n      curX = move.pageX - screen.left\n      curY = move.pageY - screen.top\n    else\n      curX = e.offsetX\n      curY = e.offsetY\n\n\n    dx = curX - _player.left\n    dy = curY - _player.top\n\n    if Math.abs(dx) > _player.width*2\n      if curX > _player.left\n        curX = _player.left + _player.width\n      else\n        curX = _player.left - _player.width/4\n\n    if Math.abs(dy) > _player.height*2\n      if curY > _player.top\n        curY = _player.top + _player.height\n      else\n       curY = _player.top - _player.height/4\n\n\n    if _player.height/2 + 50 < curY < (screen.height - _player.height/2) # Y-axis is ok\n      _player.top = curY - _player.height/2\n    else\n      if curY <= _player.height/2 + 50\n        _player.top = 50 # too high\n      else\n        _player.top = screen.height - _player.height # too low\n\n    if _player.width/2 < curX < (screen.width - _player.width/2) # X-axis is ok\n      _player.left = curX - _player.width/2\n    else\n      if curX >= screen.width - _player.width\n        _player.left = screen.width - _player.width # too right\n      else\n        _player.left = 0 # too left\n\n  #_player.em = { x: _player.left - oldCoords.x, y: _player.top - oldCoords.y }\n\n  moveEnemies = ->\n    return unless level.enemies?\n\n    screen = renderer.getScreen()\n    now = new Date().getTime()\n    dt = if level.last_ts > 0 then (now - level.last_ts)/10 else 0\n\n    for enemy in level.enemies\n      # move enemies\n      if not enemy.safe and not collision and level.player? and point = exactCollision level.player, enemy\n        collision = { killer: enemy, point: point, ts: now }\n        break\n\n      unless collision\n        if enemy.em?\n          enemy.top += (enemy.em.y * _getSpeed() * dt) >> 0 if enemy.em.y != 0\n          enemy.left += (enemy.em.x * _getSpeed() * dt) >> 0 if enemy.em.x != 0\n\n        for en, num in level.enemies when en isnt enemy # look for collisions\n          detectCollision en, enemy, true\n\n        unless enemy.free\n          # prevent stucking in walls\n          if enemy.em.x and enemy.left > screen.width - enemy.width\n            enemy.left = screen.width - enemy.width\n            enemy.em.x *= -1\n\n          if enemy.em.x and enemy.left < 0\n            enemy.left = 0\n            enemy.em.x *= -1\n\n          if enemy.em.y and enemy.top > screen.height - enemy.height\n            enemy.top = screen.height - enemy.height\n            enemy.em.y *= -1\n\n          if enemy.em.y and enemy.top < 0\n            enemy.top = 0\n            enemy.em.y *= -1\n\n        #enemy.em.i = Math.sqrt(Math.pow(enemy.em.x, 2) + Math.pow(enemy.em.y, 2)) * enemy.em.m\n\n      if enemy.projectiles # shoot\n        for projectile in enemy.projectiles\n          if not collision and level.player? and point = exactCollision level.player, projectile, 1\n            collision = { killer: projectile, point: point, ts: now }\n            break\n\n          unless projectile.hide #move projectile\n            #TODO: check full object dimensions\n            if projectile.sprite\n              sprite_offset_y = projectile.sprite.image.height - projectile.sprite.y\n              sprite_offset_x = projectile.sprite.image.width - projectile.sprite.x\n            else\n              sprite_offset_x = 0\n              sprite_offset_y = 0\n\n            if (projectile.top + projectile.height + sprite_offset_y) < 0 or projectile.top > screen.height or (projectile.left + projectile.width + sprite_offset_x) < 0 or projectile.left > screen.width # out of screen - hide\n              projectile.hide = true\n            else\n              projectile.top += (projectile.em.y * _getSpeed() * dt) >> 0\n              projectile.left += (projectile.em.x * _getSpeed() * dt) >> 0\n          else\n            if not collision and projectile.last_time + projectile.frequency < level.time # shoot again\n\n              # reset projectile state\n              #projectile = $.extend true, {}, cfg.levels[current_level].enemies[]\n              if projectile.em.auto\n                projectile.em = { x: randomFloat(-1.5, 1.5), y: randomFloat(1.5, 3), m: projectile.radius/30 * randomFloat(1, 2)}\n\n              if projectile.em.sauto\n                projectile.em.x *= randomFloat(0.7, 1.3)\n                projectile.em.y *= randomFloat(0.7, 1.3)\n\n              #projectile.em.i = Math.sqrt(Math.pow(projectile.em.x, 2) + Math.pow(projectile.em.y, 2)) * projectile.em.m\n\n              projectile.top = enemy.top + projectile.y\n              projectile.left = enemy.left + projectile.x\n              projectile.last_time = level.time\n\n              projectile.hide = false\n\n          for en in level.enemies\n            if en.projectiles?\n              for p in en.projectiles when p isnt projectile\n                detectCollision p, projectile, true # push away projectiles from each other\n\n    level.last_ts = now\n\n  disappear = =>\n    if _pa <= level.player.width\n      renderer.animate(level.player, _pa)\n      _cycleTO = requestAnimationFrame disappear\n      _pa += 12\n    else\n      cancelAnimationFrame _cycleTO\n      _pa = 0\n      gameover()\n\n  blowup = =>\n    if _pa < animations[1].fpf * animations[1].frames + animations[1].fpf\n\n      level.player.top += (collision.killer.em.y/2 + 1) >> 0\n      level.player.left += (collision.killer.em.x/2 + 1) >> 0\n\n      renderer.draw level\n      renderer.animation level.player.left, level.player.top, animations[1], _pa\n      moveEnemies()\n      _cycleTO = requestAnimationFrame blowup\n      _pa++\n    else\n      cancelAnimationFrame _cycleTO\n      _pa = 0\n      gameover()\n\n  crash = ->\n    level.player.rotation = { auto: true }\n    collide(level.player, collision.killer)\n\n    animate = =>\n      screen = renderer.getScreen()\n      _player = level.player\n      killer = collision.killer\n\n      renderer.draw level\n\n      # animate dust\n      if _pa++ < animations[0].fpf * animations[0].frames\n        x = collision.point.x - animations[0].width/2 + killer.left\n        y = collision.point.y - animations[0].height/2 + killer.top\n\n        renderer.animation x, y, animations[0], _pa, _player\n\n      now = new Date()\n\n      # move objects\n      if now.getTime() - collision.ts < 2400 and (_player.top < screen.height and (_player.top + _player.height) > 0 and _player.left < screen.width and (_player.left + _player.width) > 0)\n        _player.top += (_player.em.y * 1.6 * _getSpeed()) >> 0\n        _player.left += (_player.em.x * 1.6 * _getSpeed()) >> 0\n\n        moveEnemies()\n\n        _cycleTO = requestAnimationFrame animate\n      else\n        cancelAnimationFrame _cycleTO\n        _pa = 0\n        gameover()\n\n    animate()\n\n  exactCollision = (o1, o2, type = 0) ->\n    if o1.top + o1.height < o2.top or o2.top + o2.height < o1.top or o1.left + o1.width < o2.left or o2.left + o2.width < o1.left\n      return false\n\n    if o1.left < o2.left\n      x = o2.left\n      width  = (o1.left + o1.width - o2.left)\n    else\n      x = o1.left\n      width  = (o2.left + o2.width - o1.left)\n\n    if o1.top < o2.top\n      y = o2.top\n      height = (o1.top + o1.height - o2.top)\n    else\n      y = o1.top\n      height = (o2.top + o2.height - o1.top)\n\n    intersection = { left: x, top: y, width: width, height: height }\n\n    renderer.checkCollision(intersection, type)\n\n  showMessage = (text, active = false, callback = null) ->\n    $('#cover').css 'display', 'flex'\n\n    if text and text.length\n      text = text.replace /(#[a-f0-9]{3,6})\\|([^#]+)/gmi, '<span style=\"color: $1\">$2</span>'\n      text = text.replace /^(.+)$/gm, '<p>$1</p>'\n\n    $('#box').html(text)\n    msg = $('#message')\n    left = ($(msg).parent().width() - $(msg).width()) / 2\n    top = ($(msg).parent().height() - $(msg).height()) / 2\n    $(msg).css({left: left + 'px', top: top + 'px'})\n\n    if active\n      if callback and isFunction(callback)\n        $('#cover').unbind('click')\n        $('#cover').one 'click', callback\n        $('a').click (e) -> e.stopPropagation()\n\n      $('#click_notice').delay(1500).slideDown 650\n      $(msg).fadeIn 300\n    else\n      $('#click_notice').hide()\n      $(msg).show()\n\n  hideMessage = ->\n    $('#cover').fadeOut 100, -> $('#message').hide()\n\n  updateHUD = ->\n    $('#hud').css { display: 'table' }\n    $('#time').text(formatTime(level.time))\n    $('#bonus').text(total_bonus + level.score)\n    $('#hiscore').text(player.record)","listen = (callback, one = true, type = 'click') ->\n  return false unless isFunction callback\n\n  layer = $('#active')\n  $(layer).unbind()\n  if one then $(layer).one type, callback else $(layer).on type, callback\n\nclearListeners = ->\n  $('#active').unbind()","$(document).ready ->\n  LIC = new Image\n  LIC.src = \"//counter.yadro.ru/hit?r\" + escape(document.referrer) + (unless screen then \"\" else \";s\" + screen.width + \"*\" + screen.height + \"*\" + (if screen.colorDepth then screen.colorDepth else screen.pixelDepth)) + \";u\" + escape(document.URL)+ \";\" + Math.random()\n  game = new Game config\n\nrandom = (min = 0, max = 1) ->\n  Math.round(Math.random() * (max - min) + min)\n\nrandomFloat = (min = -1, max = 1) ->\n  Math.random() * (max - min) + min\n\nformatTime = (time) ->\n  (time/1000).toFixed 2\n\npythagoras = (a, b) ->\n  Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n\nisFunction = (functionToCheck) ->\n getType = {}\n functionToCheck && getType.toString.call(functionToCheck) is '[object Function]';\n\nsimplePluralize = (number, cases) ->\n    _case = 0\n    short = number%100\n    last = short%10\n\n    if !last or last > 4 or 4 < short < 21\n      _case = 2\n    else if last > 1\n      _case = 1\n\n    number + ' ' + cases[_case]\n\ngetString = (string) ->\n  string[navigator.language] or string","class Mover\n  constructor: (screen) ->\n    @screen = screen\n\n  movePlayer: (e) =>\n# handle touch crap\n    e.preventDefault()\n\n    if e.type is 'touchmove'\n      move = e.originalEvent.changedTouches[0]\n      offset =  $('#screen').offset()\n      curX = move.pageX - offset.left\n      curY = move.pageY - offset.top\n    else\n      curX = e.offsetX\n      curY = e.offsetY\n\n    player = @level.player\n    screen = @renderer.getScreen()\n\n    if @status\n      if screen.top + player.height/2 < curY < (screen.height - player.height/2)\n        player.top = curY - player.height/2\n      else\n        if curY < screen.top + player.height/2\n          player.top = screen.top\n        else\n          player.top = screen.height - player.height\n\n      #  @collided = true\n\n      if screen.left + player.width/2 < curX < (screen.left + screen.width - player.width/2)\n        player.left = curX - player.width/2\n      else\n        if curX > screen.width - player.width\n          player.left = screen.left + screen.width - player.width\n        else\n          player.left = screen.left\n\n#  @collided = true\n\n  moveEnemies: (enemies) ->\n    for enemy in @level.enemies\n      if enemy.left > @screen.left + screen.width - enemy.width or enemy.left < @screen.left\n        enemy.dir.x *= -1\n\n      if enemy.top > @screen.aTop + screen.height - enemy.height or enemy.top < @screen.top\n        enemy.dir.y *= -1\n\n      for en, num in @level.enemies when en isnt enemy\n        if en.jc? isnt num and @_detectCollision en, enemy # push collided objects away, but let them move once after collision\n          en.dir.x *= -1\n          enemy.dir.x *= -1\n          en.dir.y *= -1\n          enemy.dir.y *= -1\n          en.jc = num # collided with\n        else\n          en.jc = -1\n\n      enemy.top += enemy.em.y * enemy.dir.y * @time / @level.speed\n      enemy.left += enemy.em.x * enemy.dir.x * @time / @level.speed\n\n      if @_detectCollision @level.player, enemy\n        @collided = true\n\n\n  _detectCollision: (object1, object2) ->\n    difX = object1.left - object2.left\n    difY = object1.top - object2.top\n\n    -object1.width < difX < object2.width and -object1.height < difY < object2.height","###\nclass Obj\n  @player: 0\n  @mob: 1\n  @projectile: 2\n\n  constructor: (type, config) ->\n    @type = type\n    @name = config.name\n    @color = config.color\n    @sprites = config.sprites\n    @top = config.top\n    @left = config.left\n    @width = config.width\n    @height = config.height\n\n    if config.em?\n      @em = config.em\n    else\n      @em = { x: random(0.1, 1), y: random(.1, 1)}\n\n    if config.dir?\n      @dir = config.dir\n    else\n      @dir = { x: (if random() then 1 else -1), y: (if random() then 1 else -1) }\n\n    @safe = if config.safe or @type is @player then true else false\n\n  @move: ->\n###","detectCollision = (o1, o2, push = false) ->\n  if o1.top + o1.height < o2.top or o2.top + o2.height < o1.top or o1.left + o1.width < o2.left or o2.left + o2.width < o1.left\n    return false\n\n  if o1.em? and o2.em? and o1.em.m == 0 and o2.em.m == 0 # don't waste time on lasers etc.\n    return false\n\n  # object centers\n  c1 = x: o1.left + o1.width/2, y: o1.top + o1.height/2\n  c2 = x: o2.left + o2.width/2, y: o2.top + o2.height/2\n\n  gap = x: Math.abs(c1.x - c2.x), y: Math.abs(c1.y - c2.y)\n\n  gap.d = Math.sqrt(Math.pow(gap.x, 2) + Math.pow(gap.y, 2))\n\n  if o1.radius? and o2.radius?\n    ratio = (o1.radius + o2.radius) / gap.d\n  else\n    if gap.x > gap.y\n      ratio = ((o1.width + o2.width)/2) / gap.x\n    else\n      ratio = ((o1.height + o2.height)/2) / gap.y\n\n  if ratio > 1 # intersection!\n    if push # push objects away\n      dd_x = (gap.x) * ratio - gap.x\n      dd_y = (gap.y) * ratio - gap.y\n\n      dir1_x = if c1.x > c2.x then 1 else -1\n      dir1_y = if c1.y > c2.y then 1 else -1\n      dir2_x = if c2.x > c1.x then 1 else -1\n      dir2_y = if c2.y > c1.y then 1 else -1\n\n      o1.left += (dd_x) * dir1_x/2\n      o1.top += (dd_y) * dir1_y/2\n\n      o2.left += (dd_x) * dir2_x/2\n      o2.top += (dd_y) * dir2_y/2\n\n      # renew centers data\n      c1 = x: o1.left + o1.width/2, y: o1.top + o1.height/2\n      c2 = x: o2.left + o2.width/2, y: o2.top + o2.height/2\n\n      collide o1, o2, c1, c2\n    return true\n  else\n    return false\n\ncollide = (o1, o2, c1 = null, c2 = null) ->\n  v1 = o1.em\n  v2 = o2.em\n\n  unless v1.m? or v2.m? # objects with no mass should be just pushed away\n    v1.x *= -1\n    v1.y *= -1\n    v2.x *= -1\n    v2.y *= -1\n  else\n    c1 = x: o1.left + o1.width/2, y: o1.top + o1.height/2 unless c1\n    c2 = x: o2.left + o2.width/2, y: o2.top + o2.height/2 unless c2\n\n    fi = Math.atan2(c1.y - c2.y, c1.x - c2.x)\n    cos = Math.cos(fi)\n    sin = Math.sin(fi)\n\n    pL1 = v1.x * cos + v1.y * sin\n    pL2 = v2.x * cos + v2.y * sin\n\n    pA1 = v1.y * cos - v1.x * sin\n    pA2 = v2.y * cos - v2.x * sin\n\n    P = v1.m * pL1 + v2.m * pL2\n    V = pL1 - pL2\n    v2f = (P + v1.m * V) / (v1.m + v2.m)\n    v1f = v2f - pL1 + pL2\n    pL1 = v1f\n    pL2 = v2f\n\n    v1.x = pL1 * cos - pA1 * sin\n    v1.y = pA1 * cos + pL1 * sin\n    v2.x = pL2 * cos - pA2 * sin\n    v2.y = pA2 * cos + pL2 * sin\n\n\n    v1.i = v1.m * pythagoras v1.x, v1.y\n    v2.i = v2.m * pythagoras v2.x, v2.y\n\n  return [v1, v2]","\nclass Render\n\n  constructor: (@debug) ->\n    @screen_container = $('#screen')\n    screen_offset = $(@screen_container).offset()\n    @screen =\n    {\n      width: 700,\n      height: 700,\n      top: screen_offset.top,\n      left: screen_offset.left\n    }\n\n    @bgr = @_createLayer()\n    @mobs = @_createLayer()\n    @projectiles = @_createLayer()\n    @player = @_createLayer 'player'\n    @overlay = @_createLayer 'overlay'\n    @dbg = @_createLayer 'dbg'\n    @fps = @_createLayer 'fps', 40, 40\n\n    @resetFPS()\n\n  _createLayer: (container_id = null, height = null, width = null) ->\n    width = @screen.width unless width\n    height = @screen.height unless height\n\n    div = document.createElement 'div'\n    div.setAttribute('id', container_id) if container_id\n    $(@screen_container).append(div)\n\n    canvas = document.createElement('canvas')\n    canvas.setAttribute('width', width)\n    canvas.setAttribute('height', height)\n    div.appendChild(canvas).getContext('2d')\n\n\n  draw: (level) ->\n    @_drawBackground level.background, level.time if level.background?\n    @_drawPlayer level.player if level.player?\n    @_drawOverlay level.enemies if level.enemies?\n\n    # draw blinking overlay if needed\n    @_drawFilter level.filter if level.filter?\n\n    # debug data\n    wf_objects = []\n\n    if level.enemies?\n      for object in level.enemies\n        wf_objects.push(object)\n\n        if object.projectiles?\n          for projectile in object.projectiles\n            wf_objects.push(projectile)\n\n    if level.player?\n      wf_objects.push(level.player)\n\n    @_drawWireframe wf_objects\n    @_showFPS()\n\n\n  clear: ->\n    @_clearCanvas context for context in [@bgr, @player, @mobs, @overlay, @top, @dbg, @fps] when context?\n\n\n  _clearCanvas: (context) ->\n    context.clearRect 0,0, context.canvas.width, context.canvas.height\n\n  _drawBackground: (bgr, time) ->\n    @bgr.fillStyle = bgr.color\n    @bgr.fillRect 0, 0, @bgr.width, @bgr.height\n\n    # render background\n    if bgr.image?\n      origin_x = 0\n      origin_y = 0\n\n      if scroll = bgr.scroll # depending on direction gotta position image correctly\n        if scroll.x != 0\n          origin_x = if scroll.x > 0 then (bgr.image.width - @bgr.canvas.width - time/scroll.x) else - (time/scroll.x)\n\n        if scroll.y != 0\n          origin_y = if scroll.y > 0 then  (bgr.image.height - @bgr.canvas.height - time/scroll.y) else - (time/scroll.y)\n\n        @bgr.drawImage bgr.image, origin_x, origin_y, @bgr.canvas.width, @bgr.canvas.height, 0, 0, @bgr.canvas.width, @bgr.canvas.height\n      else\n        if bgr.zoom != 0\n          bgr.ratio ?= (if bgr.image.width < bgr.image.height then @bgr.canvas.width / bgr.image.width else @bgr.canvas.height / bgr.image.height) * Math.SQRT2 # sec45° = √2 which is a ratio of rotated by 45° to outer square\n\n          @bgr.save()\n          zoom = bgr.zoom * (time + 1)/1000 + bgr.ratio # initial zoom should be 1\n\n          @bgr.translate @bgr.canvas.width/2, @bgr.canvas.height/2\n\n          if bgr.rotate != 0\n            @bgr.rotate bgr.rotate * time/1000\n\n          @bgr.scale zoom, zoom\n\n          @bgr.drawImage bgr.image, -(bgr.image.width)/2, -(bgr.image.height)/2 # no-clipping performance?..\n          @bgr.restore()\n        else\n          @bgr.drawImage bgr.image, 0, 0\n\n\n  _drawFilter: (filter) ->\n    @_clearCanvas @overlay\n    if filter.duration * @_fps > @frames % (filter.threshold * @_fps) > 1 or not filter.threshold\n      @overlay.fillStyle = filter.color\n      @overlay.fillRect 0, 0, @overlay.canvas.width, @overlay.canvas.height\n\n  _drawPlayer: (player) ->\n    @_clearCanvas @player\n    @_drawObject player, @player\n\n\n  _drawOverlay: (objects) ->\n    @_clearCanvas @mobs\n    @_clearCanvas @projectiles\n    for object in objects\n      @_drawObject object, @mobs\n      # projectiles\n      @_drawObject projectile, @projectiles for projectile in object.projectiles if object.projectiles?\n\n\n  _drawObject: (object, context) ->\n    #if 0 <= object.top + object.height + object.sprite.y + object.sprite.image.height and object.top < context.canvas.height and 0 <= object.left + object.width + object.sprite.x + object.sprite.image.width and object.left < context.canvas.width\n    if object.width and object.height and not object.hide # don't render zero-sized objects\n      if object.sprite? # don't render object's outside the vieport\n\n        object.cur_sprite = 0 unless object.cur_sprite?\n        object.sprite.width ?= object.sprite.image.width\n        object.sprite.height ?= object.sprite.width\n\n        if ++object.sprite.fsps == object.sprite.fpf # fsps = frames spend per sprite\n          object.sprite.fsps = 0\n          object.cur_sprite = 0 if object.cur_sprite++ == object.sprite.frames - 1\n\n        if object.rotation?\n          object.rotation.angle = 0 unless object.rotation.angle?\n\n          if object.rotation.auto and not object.rotation.angle and object.em? # don't calculate everytime\n            object.rotation.angle = -(Math.atan(object.em.x / object.em.y)*180/Math.PI)/2\n\n          context.save()\n\n          context.translate object.left + (object.width)/2, object.top + (object.height)/2\n          context.rotate object.rotation.angle * Math.PI/180\n          object.rotation.angle += object.rotation.speed\n\n          context.drawImage object.sprite.image, 0, object.cur_sprite * object.sprite.height, object.sprite.width, object.sprite.height, -(object.width)/2 + object.sprite.x, -(object.height)/2 + object.sprite.y, object.sprite.width, object.sprite.height\n\n          context.restore()\n        else # no rotation\n          context.drawImage object.sprite.image, 0, object.cur_sprite * object.sprite.height, object.sprite.width, object.sprite.height, object.left + object.sprite.x, object.top + object.sprite.y, object.sprite.width, object.sprite.height\n\n          # save last position\n          object.last = { top: object.top + object.sprite.y, left: object.left + object.sprite.x, width: object.sprite.image.width, height: object.sprite.image.height }\n      else\n        context.fillStyle = object.color #draw stub rectangle if no sprite is presented\n\n        if object.radius?\n          context.save()\n          context.translate object.left + object.width/2, object.top + object.height/2\n\n          context.beginPath()\n          context.arc 0, 0, object.radius, 0, Math.PI*2\n          context.closePath()\n          context.fill()\n\n          context.restore()\n        else\n          context.fillRect object.left, object.top, object.width, object.height\n\n        object.last = { top: object.top, left: object.left, width: object.width, height: object.height }\n\n\n  _drawWireframe: (objects) -> #fix this\n    @_clearCanvas @dbg\n    @dbg.lineWidth = 2\n\n    for object in objects\n      @dbg.strokeStyle = if object.color? then object.color else '#0f0'\n\n      @dbg.save()\n      @dbg.translate object.left, object.top\n\n      if object.radius?\n        @dbg.beginPath()\n        @dbg.arc object.width/2, object.height/2, object.radius, 0, Math.PI*2\n        @dbg.stroke()\n      else\n        @dbg.strokeRect 0, 0, object.width, object.height\n\n      if object.em? and object.em.i?\n        @dbg.strokeStyle = '#0fc'\n        @_drawLine [object.width/2, object.height/2], [object.width/2 + object.em.x * object.em.m * 20, object.height/2 + object.em.y * object.em.m * 20] # draw direction vector\n  #      @dbg.strokeStyle = '#0ff'\n  #      @_drawLine [object.width/2, object.height/2], [object.width/2 - object.em.x * object.em.m * 150, object.height/2 - object.em.y * object.em.m * 150] # draw trace\n        theta = Math.atan(object.em.x / object.em.y)*180/Math.PI\n\n        @dbg.font = '14px Arial'\n        @dbg.fillStyle = '#ff0'\n        hint = \"θ = #{theta.toFixed(2)}°\"\n        hint += ' m = ' + (object.em.m).toFixed(2) + ' p = ' + (object.em.i).toFixed(3) if object.em.m\n        @dbg.fillText hint, object.width/2, object.height/2 - 20\n\n        @dbg.fillStyle = '#f00'\n        @dbg.fillText 'i = ' + pythagoras(object.em.x, object.em.y).toFixed(2), object.width/2 + object.em.x * object.em.m * 20, object.height/2 + object.em.y * object.em.m * 20\n\n      @dbg.restore()\n\n  _showFPS: ->\n    @_clearCanvas @fps\n    now = new Date()\n    @time = now.getTime() - @start_time\n    @frames++\n    @_fps = @frames / (@time / 1000) >> 0\n\n    @fps.font = '30px Arial'\n    @fps.textAlign = 'start'\n    @fps.fillStyle = '#ff0'\n    @fps.fillText @_fps, 0, 30\n    @_fps\n\n\n  _drawPolygon: (start, vertex...) ->\n    @dbg.lineWidth = 2\n    @dbg.strokeStyle = \"#f00\"\n    @dbg.beginPath()\n    @dbg.moveTo start[0], start[1]\n\n    for v in vertex\n      @dbg.lineTo v[0], v[1]\n\n    @dbg.closePath()\n    @dbg.stroke()\n\n  _drawLine: (p1, p2) ->\n    @dbg.lineWidth = 1\n\n    @dbg.beginPath()\n    @dbg.moveTo p1[0], p1[1]\n    @dbg.lineTo p2[0], p2[1]\n    @dbg.stroke()\n\n  getScreen: ->\n    @screen\n\n  resetFPS: ->\n    now = new Date()\n    @start_time = now.getTime()\n    @time = 0\n    @frames = 0\n    @_fps = 0\n\n  checkCollision: (rect, type, tolerance = 10) ->\n    if rect.left >= 0 and rect.top >= 0 and rect.width and rect.height\n      second_layer = if type is 0 then @mobs else @projectiles\n\n      data1 = @player.getImageData(rect.left, rect.top, rect.width, rect.height)\n      data2 = second_layer.getImageData(rect.left, rect.top, rect.width, rect.height)\n\n      contact = 0\n\n      for i  in [3...data1.data.length] by 4 # rgba\n        if data1.data[i] != 0 and data2.data[i] != 0 # if it's not transparent\n          x = i % rect.width\n          y = Math.floor(i / rect.height)\n          return { x: x, y: y } if ++contact >= tolerance\n\n      return false\n\n  animate: (o, step) ->\n    @_clearCanvas @player\n    @player.drawImage o.sprite.image, 0, 0, o.sprite.width - step, o.sprite.height, o.left + o.sprite.x, o.top + o.sprite.y, o.sprite.width - step, o.sprite.height\n\n  animation: (x, y, animation, step, player = null) ->\n    top = animation.height * Math.floor(step / animation.fpf)\n\n    #x = @screen.width - animation.width if x > @screen.width\n    #y = @screen.height - animation.height if y > @screen.height\n\n    @player.clearRect 0, 0, @player.canvas.width, @player.canvas.height\n    @_drawObject player, @player if player?\n    @player.drawImage animation.image, 0, top, animation.width, animation.height, x, y, animation.width, animation.height","class Resource\n  constructor: (@folders, @ready = null, @progress = null) ->\n    @files = []\n\n  startQueue: ->\n    @queued_size = 0\n    @loaded_size = 0\n    @files_queued = 0\n    @files_loaded = 0\n    @errors = 0\n    @queue_closed = false\n\n  closeQueue: ->\n    @queue_closed = true\n    @_isReady()\n\n  getResource: (name, type) ->\n    src = window.location.protocol + '//' + window.location.host + '/' + @folders.base + '/' + @folders[type] + '/' + name\n\n    @files_queued++\n\n    # let's check if it was loaded before\n    if file = @_findFile(src)\n      @files_loaded++\n      @queued_size += file.size\n      @loaded_size += file.size\n    else\n      # load a new one\n      file = { name: name, type: type, image: null, loaded: false, size: null, error: false }\n      file.image = new Image\n      file.image.src = src\n      file.image.onload = @_onLoad\n      file.image.onerror = @_onError\n\n      @_requestFileSize(src)\n\n      @files.push file\n\n    return file\n\n  getFilesCount: ->\n    { total: @files.length, loaded: @files_loaded }\n\n  _onLoad: (e) =>\n    file = @_findFile(e.currentTarget.src)\n    file.loaded = true\n    @loaded_size += file.size\n    @files_loaded++\n\n    if @queue_closed and isFunction(@progress)\n      progress = 100 - ((@queued_size - @loaded_size) / @queued_size * 100) >> 0\n      @progress(progress)\n\n    @_isReady()\n\n  _loaded: ->\n\n  _isReady: ->\n    @ready() if @queue_closed and @files_queued is @files_loaded and isFunction(@ready)\n\n  _onError: (e) =>\n    file = @_findFile(e.currentTarget.src)\n    file.error = true\n    @errors++\n\n  _findFile: (src) ->\n    for file in @files\n      return file if file.image and file.image.src == src\n\n  # request file size from server\n  _setFileSize: (src, size) =>\n    if file = @_findFile(src)\n      file.size = size\n      @queued_size += size\n\n  _requestFileSize: (src) ->\n    xhr = new XMLHttpRequest()\n    xhr.open('HEAD', src, true)\n\n    xhr.onreadystatechange = =>\n      if xhr.readyState == 4\n        if xhr.status == 200\n          size = parseInt(xhr.getResponseHeader('Content-Length'))\n        else\n          size = 1\n\n        @_setFileSize(src, size)\n    # TODO: add error check\n\n    xhr.send()","main =\n{\n  click: { en: 'Click to start', ru: 'Кликни, чтобы начать' },\n  continue: { en: 'Click to continue', ru: 'Кликни, чтобы продолжить' },\n  copyright: { en: \"All rights reserved\", ru: \"Все права защищены\" },\n  loading: { en: \"Loading\", ru: \"Загрузка\" },\n  error: { en: \"Catastrophe\", ru: \"Беда\" },\n  connectionIssue: { en: \"Server\\nconnection\\nfailed\", ru: \"Невозможно\\nсоединиться\\nс сервером\" },\n\n  difficulty: { en: \"Difficulty\", ru: \"Уровень сложности\" },\n  easy: { en: \"Noob\", ru: \"Лайтово\" },\n  normal: { en: \"Normal\", ru: \"Норм\" },\n  hardcore: { en: \"Hardcore\", ru: \"Хардкор\" },\n  insane: { en: \"Insane\", ru: \"Безумие\" },\n  #easy: { en: \"\", ru: \"\" },\n  #easy: { en: \"\", ru: \"\" },\n}"]}